
import { ComboBox, CheckBox, Button, StandardTableView, HorizontalBox, LineEdit, ScrollView } from "std-widgets.slint";
export component AppWindow inherits Window {
    // `in` means that it is data that is taken into the widget but cannot be modified by the widget
    
    in property <[[StandardListViewItem]]> table-data; // 2d vector of values excluding the header row
    in property <[TableColumn]> header-data; // 1d vector of values that is just the header row/column titles

    callback hide_column(string);
    callback show_column(string);
    callback hide_name();
    callback show_name();
    callback sort-ascending(int);
    callback sort-descending(int);
    callback open_popup();
    callback close_popup();
    callback update_search(string);
    

    width: 1200px;
    height: 1000px;

    popup := PopupWindow {
        close-on-click: false;
        x: parent.width/6;
        y: parent.height/6;
        width: parent.width*(2/3);
        height: parent.height*(2/3);

        popup_background := Rectangle {
            background: white;
            x: parent.x;
            y: parent.y;
            width: parent.width;
            height: parent.height;
            VerticalLayout {
                x: parent.x;
                y: parent.y;
                width: parent.width;
                height: parent.height;

                header_text := Text {
                    width: self.preferred-width;
                    height: self.preferred-height;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: 24px;
                    wrap: word-wrap;
                    //font-weight: 4; // 100-900 (400 default)
                    text: "Test Header";
                }
                help_text := Text {
                    width: parent.width;
                    height: self.preferred-height;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    font-size: 14px;
                    //font-weight: 2; // 100-900 (400 default)
                    wrap: word-wrap;
                    text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
                    
                }
                
                exit_button := Button {
                    x: parent.width/2 - self.preferred-width/2; // centered
                    width: self.preferred-width;
                    height: self.preferred-height;
                    text: "close";
                    clicked => { popup.close(); }
                }
                
                
            }
        }
    }

    main_layout := HorizontalLayout { // creates an unnamed `HorizonalLayout`
        left_side := VerticalLayout {
            min-width: 100px;
            horizontal-stretch: 0.5;
            
            menu_option := Rectangle { // creates a new `Rectangle` named "menu_option"
            // use `Button` to create a dropdown that has a selection, each of which when clicked creates a new
                background: red;
                min-height: 50px;
                max-height: 100px;
                vertical-stretch: 0.25;

                hamburger := Rectangle { // TODO: ADD SAVE BUTTON
                    background: blueviolet;
                    x: parent.height*(0.175);
                    y: self.x;
                    width: parent.height*(0.65);
                    height: self.width;
                    TouchArea {
                        clicked => { 
                            if (self.pressed){
                                popup.show();
                            } else {
                                popup.close();
                            }
                        }
                    }

                }
                
            }

            filter_options := Rectangle { 
                background: orange;

                Text {
                    x: parent.width*(2/5);
                    y: parent.height*(1/16);
                    text: "Sort Options";
                }
                

                Text {
                    x: parent.width*(2/5);
                    y: parent.height*(1/12) + parent.height*(1/5);
                    text: "Hide Columns";
                }

                is_name_hidden := CheckBox {
                    x: parent.width*(1/4);
                    y: parent.height*(1/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "Name";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
                is_value_hidden := CheckBox {
                    x: parent.width*(1/4);
                    y: parent.height*(2/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "resource_one";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
                is_type_hidden := CheckBox {
                    x: parent.width*(1/4);
                    y: parent.height*(3/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "Type";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
                is_phone_number_hidden := CheckBox {
                    x: parent.width*(3/5);
                    y: parent.height*(1/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "Number";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
                is_address_hidden := CheckBox {
                    x: parent.width*(3/5);
                    y: parent.height*(2/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "Address";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
                is_scholarship_hidden := CheckBox {
                    x: parent.width*(3/5);
                    y: parent.height*(3/8) + parent.height*(1/5);
                    width: 50px;
                    height: 50px;
                    text: "Scholarship";
                    toggled => { if (self.checked) {hide_column(self.text)} else {show_column(self.text)}}
                }
            }
        }

        right_side := VerticalLayout { 

            add_new_record := Rectangle { // use `LineEdit` for text input, `CheckBox` for scholarship boolean, maybe others
                background: white;
                min-height: menu-option.min-height; // sets the dimensions to be the same as those of "menu_option"
                vertical-stretch: menu-option.vertical-stretch;

                add_record := Button {
                    x: parent.x + parent.width*(1/3);
                    y: parent.y + parent.height/2;
                    text: "add record";
                    clicked => {/* open dialog to enter new values*/}
                }

                // TODO: add button to update/edit a record

                delete_record := Button {
                    x: parent.x + parent.width*(2/3);
                    y: parent.y + parent.height/2;
                    text: "delete record";
                    clicked => {/*select row to delete and delete it*/}
                }
                
                HorizontalBox {
                    x: parent.x;
                    y: parent.y;
                    width: parent.width;
                    height: parent.height*(1/6);
                    inbox-name := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Name";
                        edited => { update_search(self.text); }
                    }
                    inbox-value := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Value";
                        edited => { update_search(self.text); }
                    }
                    inbox-type := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Type";
                        edited => { update_search(self.text); }
                    }
                }
                HorizontalBox {
                    x: parent.x;
                    y: parent.height*(1/5);
                    width: parent.width;
                    height: parent.height*(1/6);
                    inbox-phone-number := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Phone Number";
                        edited => { update_search(self.text); }
                    }
                    inbox-address := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Address";
                        edited => { update_search(self.text); }
                    }
                    inbox-scholarship := LineEdit {
                        y: parent.y;
                        height: parent.height;
                        font-size: 14px;
                        placeholder-text: "Scholarship";
                        edited => { update_search(self.text); }
                    }
                }
                

                 
                }
                    
                
        
                


                // TODO: add search menu bar thing that is like a single row where you can search for items by value like regex


            

            table_display := Rectangle { // add a scrollview to contain the tableview
                background: green;
                /*
                ScrollView {
                    x: parent.x;
                    y: parent.y;
                    width: parent.width;
                    height: parent.height; */
                    
                    csv_display := StandardTableView {
                        x: parent.x;
                        y: parent.y;
                        width: parent.width;
                        height: parent.height;
                        columns: header-data;
                        rows: table-data;
                        sort-ascending => {
                            // sort ascending by column
                            sort-ascending(self.current-sort-column);
                        }
                        sort-descending => {
                            // sort decending by column
                            sort-descending(self.current-sort-column);
                        }
                    }
                //}
            }
        }
    }
}








/*
component Button inherits Rectangle {
    // TODO: implement button component/struct
}

export component MainWindow inherits Window {
    width: 400px; // logical pixels (before device specific scaling)
    height: 400px;



    // component member implementation (put into displayed window)
}

*/









/*
TouchArea { // when clicked (put this in the component)
    clicked => {
        // Delegate to the user of this element
        root.clicked(); // root refers to the outermost element in the component
    }
}

callback keyword is used to call a rust function outside of slint

*/



/* TODO: (some of the logic may need to go in gui.rs)

Make good layout

Buttons:
    - implement the functions below

Functions:
- sort/filter table
    - has scholarships
    - alphabetically by name
    - reverse alphabetically by name
    - TODO: add more filters/sorts
- edit table
    - add
    - update
    - delete

Windows/Modes/Menus:
- help menu
- import/export csv
- settings menu
- home menu
- table view 

Table Display:
- sort options
- filter options


ADD GPT INTEGRATION FOR THE HELP


*/




